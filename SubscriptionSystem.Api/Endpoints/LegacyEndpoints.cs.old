using SubscriptionSystem.Models;
using SubscriptionSystem.Dtos;
using SubscriptionSystem.Results;
public static class LegacyEndpoints
{
    public static void MapCustomerEndpoints(this WebApplication app, List<Customer> customers)
    {
        //adds a payment method to a customer
        app.MapPost("/customers/{id}/paymentMethods", (Guid id, AddPaymentMethodDto dto) =>
            {
                var customer = customers.FirstOrDefault(c => c.GuId == id);
                if (customer == null)
                    return Results.NotFound($"Customer with id {id} was not found.");

                var newPaymentMethod = new PaymentMethod(dto.Type, dto.LastFourDigits, dto.Expiry, dto.GatewayToken, id);
                AddPaymentMethodResult addResult = customer.AddPaymentMethod(newPaymentMethod);

                return addResult == AddPaymentMethodResult.Success
                    ? Results.Created("Successfully added payment method", newPaymentMethod)
                    : Results.BadRequest("Failed to add payment method");
            });

        //deletes a payment method from a customer
        app.MapDelete("/customers/{customerId}/paymentMethods/{paymentMethodId}", (Guid customerId, Guid paymentMethodId) =>
        {
            var customer = customers.FirstOrDefault(c => c.GuId == customerId);
            if (customer == null)
                return Results.NotFound($"Customer with id {customerId} was not found.");

            var paymentMethod = customer.PaymentMethods.FirstOrDefault(pm => pm.PaymentMethodId == paymentMethodId);
            if (paymentMethod == null)
                return Results.NotFound($"Payment method with id {paymentMethodId} was not found for customer {customerId}.");

            GenericResult removeResult = customer.RemovePaymentMethod(paymentMethodId);
            if (removeResult == GenericResult.Success) return Results.NoContent();
            return Results.BadRequest("Failed to remove payment method");
        });
    }
}

